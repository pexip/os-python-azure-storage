diff --git a/azure/storage/_encryption.py b/azure/storage/_encryption.py
deleted file mode 100644
index 7e61d2c..0000000
--- a/azure/storage/_encryption.py
+++ /dev/null
@@ -1,232 +0,0 @@
-#-------------------------------------------------------------------------
-# Copyright (c) Microsoft.  All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#   http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#--------------------------------------------------------------------------
-from ._common_conversion import(
-    _encode_base64,
-    _decode_base64_to_bytes,
-)
-from ._constants import(
-    _ENCRYPTION_PROTOCOL_V1,
-    __version__,
-)
-from ._error import(
-    _ERROR_UNSUPPORTED_ENCRYPTION_VERSION,
-    _validate_not_none,
-    _validate_encryption_protocol_version,
-    _validate_key_encryption_key_unwrap,
-    _validate_kek_id,
-)
-from cryptography.hazmat.backends import default_backend
-from cryptography.hazmat.primitives.ciphers.algorithms import AES
-from cryptography.hazmat.primitives.ciphers.modes import CBC
-from cryptography.hazmat.primitives.ciphers import Cipher
-from collections import OrderedDict
-
-class _EncryptionAlgorithm(object):
-    '''
-    Specifies which client encryption algorithm is used.
-    '''
-    AES_CBC_256 = 'AES_CBC_256'
-
-class _WrappedContentKey:
-    '''
-    Represents the envelope key details stored on the service.
-    '''
-
-    def __init__(self, algorithm, encrypted_key, key_id):
-        '''
-        :param str algorithm:
-            The algorithm used for wrapping.
-        :param bytes encrypted_key:
-            The encrypted content-encryption-key.
-        :param str key_id:
-            The key-encryption-key identifier string.
-        '''
-
-        _validate_not_none('algorithm', algorithm)
-        _validate_not_none('encrypted_key', encrypted_key)
-        _validate_not_none('key_id', key_id)
-
-        self.algorithm = algorithm
-        self.encrypted_key = encrypted_key
-        self.key_id = key_id
-
-class _EncryptionAgent:
-    '''
-    Represents the encryption agent stored on the service.
-    It consists of the encryption protocol version and encryption algorithm used.
-    '''
-
-    def __init__(self, encryption_algorithm, protocol):
-        '''
-        :param _EncryptionAlgorithm encryption_algorithm:
-            The algorithm used for encrypting the message contents.
-        :param str protocol:
-            The protocol version used for encryption.
-        '''
-
-        _validate_not_none('encryption_algorithm', encryption_algorithm)
-        _validate_not_none('protocol', protocol)
-
-        self.encryption_algorithm = str(encryption_algorithm)
-        self.protocol = protocol
-
-class _EncryptionData:
-    '''
-    Represents the encryption data that is stored on the service.
-    '''
-
-    def __init__(self, content_encryption_IV, encryption_agent, wrapped_content_key,
-                 key_wrapping_metadata):
-        '''
-        :param bytes content_encryption_IV:
-            The content encryption initialization vector.
-        :param _EncryptionAgent encryption_agent:
-            The encryption agent.
-        :param _WrappedContentKey wrapped_content_key:
-            An object that stores the wrapping algorithm, the key identifier, 
-            and the encrypted key bytes.
-        :param dict key_wrapping_metadata:
-            A dict containing metadata related to the key wrapping.
-        '''
-
-        _validate_not_none('content_encryption_IV', content_encryption_IV)
-        _validate_not_none('encryption_agent', encryption_agent)
-        _validate_not_none('wrapped_content_key', wrapped_content_key)
-
-        self.content_encryption_IV = content_encryption_IV
-        self.encryption_agent = encryption_agent
-        self.wrapped_content_key = wrapped_content_key
-        self.key_wrapping_metadata = key_wrapping_metadata
-
-def _generate_encryption_data_dict(kek, cek, iv):
-    '''
-    Generates and returns the encryption metadata as a dict.
-
-    :param object kek: The key encryption key. See calling functions for more information.
-    :param bytes cek: The conetent encryption key.
-    :param bytes iv: The initialization vector.
-    :return: A dict containing all the encryption metadata.
-    :rtype: dict
-    '''
-    # Encrypt the cek.
-    wrapped_cek = kek.wrap_key(cek)
-
-    # Build the encryption_data dict.
-    # Use OrderedDict to comply with Java's ordering requirement.
-    wrapped_content_key = OrderedDict()
-    wrapped_content_key['KeyId'] = kek.get_kid()
-    wrapped_content_key['EncryptedKey'] = _encode_base64(wrapped_cek)
-    wrapped_content_key['Algorithm'] = kek.get_key_wrap_algorithm()
-
-    encryption_agent = OrderedDict()
-    encryption_agent['Protocol'] = _ENCRYPTION_PROTOCOL_V1
-    encryption_agent['EncryptionAlgorithm'] = _EncryptionAlgorithm.AES_CBC_256
-
-    encryption_data_dict = OrderedDict()
-    encryption_data_dict['WrappedContentKey'] = wrapped_content_key
-    encryption_data_dict['EncryptionAgent'] = encryption_agent
-    encryption_data_dict['ContentEncryptionIV'] = _encode_base64(iv)
-    encryption_data_dict['KeyWrappingMetadata'] = {'EncryptionLibrary':'Python ' + __version__}
-    
-    return encryption_data_dict
-
-def _dict_to_encryption_data(encryption_data_dict):
-    '''
-    Converts the specified dictionary to an EncryptionData object for
-    eventual use in decryption.
-    
-    :param dict encryption_data_dict:
-        The dictionary containing the encryption data.
-    :return: an _EncryptionData object built from the dictionary.
-    :rtype: _EncryptionData
-    '''
-    try:
-        if encryption_data_dict['EncryptionAgent']['Protocol'] != _ENCRYPTION_PROTOCOL_V1:
-            raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)
-    except KeyError:
-        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)
-    wrapped_content_key = encryption_data_dict['WrappedContentKey']
-    wrapped_content_key = _WrappedContentKey(wrapped_content_key['Algorithm'],
-                                                _decode_base64_to_bytes(wrapped_content_key['EncryptedKey']),
-                                                wrapped_content_key['KeyId'])
-
-    encryption_agent = encryption_data_dict['EncryptionAgent']
-    encryption_agent = _EncryptionAgent(encryption_agent['EncryptionAlgorithm'],
-                                        encryption_agent['Protocol'])
-
-    if 'KeyWrappingMetadata' in encryption_data_dict:
-        key_wrapping_metadata = encryption_data_dict['KeyWrappingMetadata']
-    else:
-        key_wrapping_metadata = None
-    
-    encryption_data = _EncryptionData(_decode_base64_to_bytes(encryption_data_dict['ContentEncryptionIV']),
-                                        encryption_agent,
-                                        wrapped_content_key,
-                                        key_wrapping_metadata)
-
-    return encryption_data
-
-def _generate_AES_CBC_cipher(cek, iv):
-    '''
-    Generates and returns an encryption cipher for AES CBC using the given cek and iv.
-
-    :param bytes[] cek: The content encryption key for the cipher.
-    :param bytes[] iv: The initialization vector for the cipher.
-    :return: A cipher for encrypting in AES256 CBC.
-    :rtype: ~cryptography.hazmat.primitives.ciphers.Cipher
-    '''
-    
-    backend = default_backend()
-    algorithm = AES(cek)
-    mode = CBC(iv)
-    return Cipher(algorithm, mode, backend)
-
-def _validate_and_unwrap_cek(encryption_data, key_encryption_key=None, key_resolver=None):
-    '''
-    Extracts and returns the content_encryption_key stored in the encryption_data object
-    and performs necessary validation on all parameters.
-    :param _EncryptionData encryption_data:
-        The encryption metadata of the retrieved value.
-    :param obj key_encryption_key:
-        The key_encryption_key used to unwrap the cek. Please refer to high-level service object
-        (i.e. TableService) instance variables for more details.
-    :param func key_resolver:
-        A function used that, given a key_id, will return a key_encryption_key. Please refer 
-        to high service object (i.e. TableService) instance variables for more details.
-    :return: the content_encryption_key stored in the encryption_data object.
-    :rtype: bytes[]
-    '''
-
-    _validate_not_none('content_encryption_IV', encryption_data.content_encryption_IV)
-    _validate_not_none('encrypted_key', encryption_data.wrapped_content_key.encrypted_key)
-    
-    _validate_encryption_protocol_version(encryption_data.encryption_agent.protocol)
-
-    content_encryption_key = None
-
-    # If the resolver exists, give priority to the key it finds.
-    if key_resolver is not None:
-        key_encryption_key = key_resolver(encryption_data.wrapped_content_key.key_id)
-
-    _validate_not_none('key_encryption_key', key_encryption_key)
-    _validate_key_encryption_key_unwrap(key_encryption_key)
-    _validate_kek_id(encryption_data.wrapped_content_key.key_id, key_encryption_key.get_kid())
-
-    # Will throw an exception if the specified algorithm is not supported.
-    content_encryption_key = key_encryption_key.unwrap_key(encryption_data.wrapped_content_key.encrypted_key,
-                                                           encryption_data.wrapped_content_key.algorithm)
-    _validate_not_none('content_encryption_key', content_encryption_key)
-
-    return content_encryption_key
\ No newline at end of file
diff --git a/azure/storage/blob/_encryption.py b/azure/storage/blob/_encryption.py
index 89623ae..1e2bb7c 100644
--- a/azure/storage/blob/_encryption.py
+++ b/azure/storage/blob/_encryption.py
@@ -13,25 +13,6 @@
 # limitations under the License.
 #--------------------------------------------------------------------------
 
-from os import urandom
-from json import(
-    dumps,
-    loads,
-)
-from .._error import(
-    _validate_not_none,
-    _validate_key_encryption_key_wrap,
-    _ERROR_DATA_NOT_ENCRYPTED,
-)
-from .._encryption import (
-    _generate_encryption_data_dict,
-    _generate_AES_CBC_cipher,
-    _dict_to_encryption_data,
-    _validate_and_unwrap_cek,
-    _EncryptionAlgorithm,
-)
-from cryptography.hazmat.primitives.padding import PKCS7
-
 def _encrypt_blob(blob, key_encryption_key):
     '''
     Encrypts the given blob using AES256 in CBC mode with 128 bit padding.
@@ -50,29 +31,7 @@ def _encrypt_blob(blob, key_encryption_key):
     :return: A tuple of json-formatted string containing the encryption metadata and the encrypted blob data.
     :rtype: (str, bytes)
     '''
-
-    _validate_not_none('blob', blob)
-    _validate_not_none('key_encryption_key', key_encryption_key)
-    _validate_key_encryption_key_wrap(key_encryption_key)
-
-    # AES256 uses 256 bit (32 byte) keys and always with 16 byte blocks
-    content_encryption_key = urandom(32)
-    initialization_vector = urandom(16)
-
-    cipher = _generate_AES_CBC_cipher(content_encryption_key, initialization_vector)
-
-    # PKCS7 with 16 byte blocks ensures compatibility with AES.
-    padder = PKCS7(128).padder()
-    padded_data = padder.update(blob) + padder.finalize()
-
-    # Encrypt the data.
-    encryptor = cipher.encryptor()
-    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
-    encryption_data = _generate_encryption_data_dict(key_encryption_key, content_encryption_key,
-                                                initialization_vector)
-    encryption_data['EncryptionMode'] = 'FullBlob'
-
-    return dumps(encryption_data), encrypted_data
+    raise RuntimeError('Unsupported')
 
 def _generate_blob_encryption_data(key_encryption_key):
     '''
@@ -84,20 +43,7 @@ def _generate_blob_encryption_data(key_encryption_key):
         serialized encryption metadata for the blob.
     :rtype: (bytes, bytes, str)
     '''
-    encryption_data = None
-    content_encryption_key = None
-    initialization_vector = None
-    if key_encryption_key:
-        _validate_key_encryption_key_wrap(key_encryption_key)
-        content_encryption_key = urandom(32)
-        initialization_vector = urandom(16)
-        encryption_data = _generate_encryption_data_dict(key_encryption_key,
-                                                            content_encryption_key,
-                                                            initialization_vector)
-        encryption_data['EncryptionMode'] = 'FullBlob'
-        encryption_data = dumps(encryption_data)
-
-    return (content_encryption_key, initialization_vector, encryption_data)
+    raise RuntimeError('Unsupported')
 
 def _decrypt_blob(require_encryption, key_encryption_key, key_resolver, 
                   response, start_offset, end_offset):
@@ -117,73 +63,10 @@ def _decrypt_blob(require_encryption, key_encryption_key, key_resolver,
     :return: The decrypted blob content.
     :rtype: bytes
     '''
-    _validate_not_none('response', response)
-    content = response.body
-    _validate_not_none('content', content)
-    
-    try:
-        encryption_data = _dict_to_encryption_data(loads(response.headers['x-ms-meta-encryptiondata']))
-    except:
-        if require_encryption:
-            raise ValueError(_ERROR_DATA_NOT_ENCRYPTED)
-        else:
-            return content
-
-    if not(encryption_data.encryption_agent.encryption_algorithm == _EncryptionAlgorithm.AES_CBC_256):
-        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM)
-
-    blob_type = response.headers['x-ms-blob-type']
-
-    iv = None
-    unpad = False
-    start_range, end_range = 0, len(content)
-    if 'content-range' in response.headers:
-        range = response.headers['content-range']
-        # Format: 'bytes x-y/size'
-
-        # Ignore the word 'bytes'
-        range = range.split(' ')
-
-        range = range[1].split('-')
-        start_range = int(range[0])
-        range = range[1].split('/')
-        end_range = int(range[0])
-        blob_size = int(range[1])
-
-        if start_offset >= 16:
-            iv = content[:16]
-            content = content[16:]
-            start_offset -= 16
-        else:
-            iv = encryption_data.content_encryption_IV
-
-        if end_range == blob_size-1:
-            unpad = True
-    else:
-        unpad = True
-        iv = encryption_data.content_encryption_IV
-
-    if blob_type == 'PageBlob':
-        unpad = False
-
-    content_encryption_key = _validate_and_unwrap_cek(encryption_data, key_encryption_key, key_resolver)
-    cipher = _generate_AES_CBC_cipher(content_encryption_key, iv)
-    decryptor = cipher.decryptor()
-    
-    content = decryptor.update(content) + decryptor.finalize()
-    if unpad:
-        unpadder = PKCS7(128).unpadder()
-        content = unpadder.update(content) + unpadder.finalize()
-
-    return content[start_offset : len(content) - end_offset]
+    raise RuntimeError('Unsupported')
 
 def _get_blob_encryptor_and_padder(cek, iv, should_pad):
     encryptor = None
     padder = None
         
-    if cek is not None and iv is not None:
-        cipher = _generate_AES_CBC_cipher(cek, iv)
-        encryptor = cipher.encryptor()
-        padder = PKCS7(128).padder() if should_pad else None
-
-    return encryptor, padder
\ No newline at end of file
+    return encryptor, padder
diff --git a/azure/storage/blob/_upload_chunking.py b/azure/storage/blob/_upload_chunking.py
index 507abd5..2fb4be9 100644
--- a/azure/storage/blob/_upload_chunking.py
+++ b/azure/storage/blob/_upload_chunking.py
@@ -15,7 +15,6 @@
 import sys
 from threading import Lock
 from time import sleep
-from cryptography.hazmat.primitives.padding import PKCS7
 from .._common_conversion import _encode_base64
 from .._serialization import (
     url_quote,
@@ -440,4 +439,4 @@ class _SubStream(IOBase):
         raise UnsupportedOperation
 
     def writeable(self):
-        return False
\ No newline at end of file
+        return False
diff --git a/azure/storage/models.py b/azure/storage/models.py
index 731f888..08c7567 100644
--- a/azure/storage/models.py
+++ b/azure/storage/models.py
@@ -24,17 +24,6 @@ from ._error import (
     _validate_not_none,
     _ERROR_UNKNOWN_KEY_WRAP_ALGORITHM
 )
-from cryptography.hazmat.primitives.keywrap import(
-    aes_key_wrap,
-    aes_key_unwrap,
-)
-from cryptography.hazmat.backends import default_backend
-from cryptography.hazmat.primitives.asymmetric.rsa import generate_private_key
-from cryptography.hazmat.primitives.asymmetric.padding import (
-    OAEP,
-    MGF1,
-)
-from cryptography.hazmat.primitives.hashes import SHA1
 from os import urandom
 
 class _HeaderDict(dict):
@@ -629,4 +618,4 @@ AccountPermissions.LIST = AccountPermissions(list=True)
 AccountPermissions.ADD = AccountPermissions(add=True)
 AccountPermissions.CREATE = AccountPermissions(create=True)
 AccountPermissions.UPDATE = AccountPermissions(update=True)
-AccountPermissions.PROCESS = AccountPermissions(process=True)
\ No newline at end of file
+AccountPermissions.PROCESS = AccountPermissions(process=True)
diff --git a/azure/storage/queue/_encryption.py b/azure/storage/queue/_encryption.py
index 590f524..58373ec 100644
--- a/azure/storage/queue/_encryption.py
+++ b/azure/storage/queue/_encryption.py
@@ -13,45 +13,6 @@
 # limitations under the License.
 #--------------------------------------------------------------------------
 
-from azure.common import (
-    AzureException,
-)
-from .._constants import (
-    _ENCRYPTION_PROTOCOL_V1,
-)
-from .._encryption import (
-    _generate_encryption_data_dict,
-    _dict_to_encryption_data,
-    _generate_AES_CBC_cipher,
-    _validate_and_unwrap_cek,
-    _EncryptionAlgorithm,
-)
-from json import (
-    dumps,
-    loads,
-)
-from base64 import(
-    b64encode,
-    b64decode,
-)
-from .._error import(
-    _ERROR_UNSUPPORTED_ENCRYPTION_VERSION,
-    _ERROR_DECRYPTION_FAILURE,
-    _ERROR_DATA_NOT_ENCRYPTED,
-    _ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM,
-    _validate_not_none,
-    _validate_key_encryption_key_wrap,
-    _validate_key_encryption_key_unwrap,
-    _validate_encryption_protocol_version,
-    _validate_kek_id,
-)
-from .._common_conversion import (
-    _encode_base64,
-    _decode_base64_to_bytes
-)
-from cryptography.hazmat.primitives.padding import PKCS7
-import os
-
 def _encrypt_queue_message(message, key_encryption_key):
     '''
     Encrypts the given plain text message using AES256 in CBC mode with 128 bit padding.
@@ -68,37 +29,7 @@ def _encrypt_queue_message(message, key_encryption_key):
     :return: A json-formatted string containing the encrypted message and the encryption metadata.
     :rtype: str
     '''
-
-    _validate_not_none('message', message)
-    _validate_not_none('key_encryption_key', key_encryption_key)
-    _validate_key_encryption_key_wrap(key_encryption_key)
-
-    # AES256 uses 256 bit (32 byte) keys and always with 16 byte blocks
-    content_encryption_key = os.urandom(32)
-    initialization_vector = os.urandom(16)
-
-    # Queue encoding functions all return unicode strings, and encryption should 
-    # operate on binary strings.
-    message = message.encode('utf-8')
-
-    cipher = _generate_AES_CBC_cipher(content_encryption_key, initialization_vector)
-
-    # PKCS7 with 16 byte blocks ensures compatibility with AES.
-    padder = PKCS7(128).padder()
-    padded_data = padder.update(message) + padder.finalize()
-
-    # Encrypt the data.
-    encryptor = cipher.encryptor()
-    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
-
-    # Build the dictionary structure.
-    queue_message = {}
-    queue_message['EncryptedMessageContents'] = _encode_base64(encrypted_data)
-    queue_message['EncryptionData'] = _generate_encryption_data_dict(key_encryption_key,
-                                                                     content_encryption_key,
-                                                                     initialization_vector)
-
-    return dumps(queue_message)
+    raise RuntimeError('Unsupported')
 
 def _decrypt_queue_message(message, require_encryption, key_encryption_key, resolver):
     '''
@@ -117,57 +48,4 @@ def _decrypt_queue_message(message, require_encryption, key_encryption_key, reso
     :return: The plain text message from the queue message.
     :rtype: str
     '''
-
-    try:
-        message = loads(message)
-
-        encryption_data = _dict_to_encryption_data(message['EncryptionData'])
-        decoded_data = _decode_base64_to_bytes(message['EncryptedMessageContents'])
-    except (KeyError, ValueError) as e:
-        # Message was not json formatted and so was not encrypted
-        # or the user provided a json formatted message.
-        if require_encryption:
-            raise ValueError(_ERROR_MESSAGE_NOT_ENCRYPTED)
-        else:
-            return message
-    try:
-        return _decrypt(decoded_data, encryption_data, key_encryption_key, resolver).decode('utf-8')
-    except Exception as e:
-        raise AzureException(_ERROR_DECRYPTION_FAILURE)
-
-def _decrypt(message, encryption_data, key_encryption_key=None, resolver=None):
-    '''
-    Decrypts the given ciphertext using AES256 in CBC mode with 128 bit padding.
-    Unwraps the content-encryption-key using the user-provided or resolved key-encryption-key (kek). Returns the original plaintex.
-
-    :param str message:
-        The ciphertext to be decrypted.
-    :param _EncryptionData encryption_data:
-        The metadata associated with this ciphertext.
-    :param object key_encryption_key:
-        The user-provided key-encryption-key. Must implement the following methods:
-        unwrap_key(key, algorithm)--returns the unwrapped form of the specified symmetric key using the string-specified algorithm.
-        get_kid()--returns a string key id for this key-encryption-key.
-    :param function resolver(kid):
-        The user-provided key resolver. Uses the kid string to return a key-encryption-key implementing the interface defined above.
-    :return: The decrypted plaintext.
-    :rtype: str
-    '''
-    _validate_not_none('message', message)
-    content_encryption_key = _validate_and_unwrap_cek(encryption_data, key_encryption_key, resolver)
-
-    if not ( _EncryptionAlgorithm.AES_CBC_256 == encryption_data.encryption_agent.encryption_algorithm):
-        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM)
-
-    cipher = _generate_AES_CBC_cipher(content_encryption_key, encryption_data.content_encryption_IV)
-
-    #decrypt data
-    decrypted_data = message
-    decryptor = cipher.decryptor()
-    decrypted_data = (decryptor.update(decrypted_data) + decryptor.finalize())
-
-    #unpad data
-    unpadder = PKCS7(128).unpadder()
-    decrypted_data = (unpadder.update(decrypted_data) + unpadder.finalize())
-
-    return decrypted_data
\ No newline at end of file
+    raise RuntimeError('Unsupported')
diff --git a/azure/storage/table/_encryption.py b/azure/storage/table/_encryption.py
index 56af38d..8c8db73 100644
--- a/azure/storage/table/_encryption.py
+++ b/azure/storage/table/_encryption.py
@@ -13,53 +13,6 @@
 # limitations under the License.
 #--------------------------------------------------------------------------
 
-from .._error import(
-    _ERROR_UNSUPPORTED_ENCRYPTION_VERSION,
-    _ERROR_DECRYPTION_FAILURE,
-    _ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM,
-    _ERROR_DATA_NOT_ENCRYPTED,
-    _validate_not_none,
-    _validate_key_encryption_key_wrap,
-    _validate_key_encryption_key_unwrap,
-    _validate_kek_id,
-)
-from .._constants import(
-    _ENCRYPTION_PROTOCOL_V1,
-)
-from .._common_conversion import(
-    _decode_base64_to_bytes,
-)
-from .._encryption import(
-    _generate_encryption_data_dict,
-    _dict_to_encryption_data,
-    _generate_AES_CBC_cipher,
-    _validate_and_unwrap_cek,
-    _EncryptionData,
-    _EncryptionAgent,
-    _WrappedContentKey,
-    _EncryptionAlgorithm
-)
-from ._error import(
-    _ERROR_UNSUPPORTED_TYPE_FOR_ENCRYPTION,
-)
-from .models import(
-    Entity,
-    EntityProperty,
-    EdmType,
-)
-from json import(
-    dumps,
-    loads,
-)
-import os
-from copy import deepcopy
-from cryptography.hazmat.backends import default_backend
-from cryptography.hazmat.primitives.padding import PKCS7
-from cryptography.hazmat.primitives.hashes import(
-    Hash,
-    SHA256,
-)
-
 def _encrypt_entity(entity, key_encryption_key, encryption_resolver):
     '''
     Encrypts the given entity using AES256 in CBC mode with 128 bit padding.
@@ -83,83 +36,7 @@ def _encrypt_entity(entity, key_encryption_key, encryption_resolver):
         encryption data.
     :rtype: object
     '''
-
-    _validate_not_none('entity', entity)
-    _validate_not_none('key_encryption_key', key_encryption_key)
-    _validate_key_encryption_key_wrap(key_encryption_key)
-
-    # AES256 uses 256 bit (32 byte) keys and always with 16 byte blocks
-    content_encryption_key = os.urandom(32)
-    entity_initialization_vector = os.urandom(16)
-
-    encrypted_properties = []
-    encrypted_entity = Entity()
-    for key, value in entity.items():
-        # If the property resolver says it should be encrypted
-        # or it is an EntityProperty with the 'encrypt' property set.
-        if (isinstance(value, EntityProperty) and value.encrypt) or \
-            (encryption_resolver is not None \
-            and encryption_resolver(entity['PartitionKey'], entity['RowKey'], key)):
-
-            # Only strings can be encrypted and None is not an instance of str.
-            if isinstance(value, EntityProperty):
-                if value.type == EdmType.STRING:
-                    value = value.value
-                else:
-                    raise ValueError(_ERROR_UNSUPPORTED_TYPE_FOR_ENCRYPTION)
-            if not isinstance(value, str):
-                raise ValueError(_ERROR_UNSUPPORTED_TYPE_FOR_ENCRYPTION) 
-
-            # Value is now confirmed to hold a valid string value to be encrypted
-            # and should be added to the list of encrypted properties.
-            encrypted_properties.append(key)
-
-            propertyIV = _generate_property_iv(entity_initialization_vector,
-                                               entity['PartitionKey'], entity['RowKey'],
-                                               key, False)
-
-            # Encode the strings for encryption.
-            value = value.encode('utf-8')
-
-            cipher = _generate_AES_CBC_cipher(content_encryption_key, propertyIV)
-
-            # PKCS7 with 16 byte blocks ensures compatibility with AES.
-            padder = PKCS7(128).padder()
-            padded_data = padder.update(value) + padder.finalize()
-
-            # Encrypt the data.
-            encryptor = cipher.encryptor()
-            encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
-
-            # Set the new value of this key to be a binary EntityProperty for proper serialization.
-            value = EntityProperty(EdmType.BINARY, encrypted_data)
-
-        encrypted_entity[key] = value
-
-    encrypted_properties = dumps(encrypted_properties)
-    
-    # Generate the metadata iv.
-    metadataIV = _generate_property_iv(entity_initialization_vector, 
-                          entity['PartitionKey'], entity['RowKey'],
-                          '_ClientEncryptionMetadata2', False)
-
-    encrypted_properties = encrypted_properties.encode('utf-8')
-
-    cipher = _generate_AES_CBC_cipher(content_encryption_key, metadataIV)
-
-    padder = PKCS7(128).padder()
-    padded_data = padder.update(encrypted_properties) + padder.finalize()
-
-    encryptor = cipher.encryptor()
-    encrypted_data = encryptor.update(padded_data) + encryptor.finalize()
-
-    encrypted_entity['_ClientEncryptionMetadata2'] = EntityProperty(EdmType.BINARY, encrypted_data)
-
-    encryption_data = _generate_encryption_data_dict(key_encryption_key, content_encryption_key,
-                                                     entity_initialization_vector)
-
-    encrypted_entity['_ClientEncryptionMetadata1'] = dumps(encryption_data)
-    return encrypted_entity
+    raise RuntimeError('Unsupported')
 
 def _decrypt_entity(entity, encrypted_properties_list, content_encryption_key, entityIV, isJavaV1):
     '''
@@ -179,38 +56,7 @@ def _decrypt_entity(entity, encrypted_properties_list, content_encryption_key, e
     :return: The decrypted entity
     :rtype: Entity
     '''
-
-    _validate_not_none('entity', entity)
-
-    decrypted_entity = deepcopy(entity)
-    try:   
-        for property in entity.keys():
-            if property in encrypted_properties_list:
-                value = entity[property]
-
-                propertyIV = _generate_property_iv(entityIV,
-                                                   entity['PartitionKey'], entity['RowKey'],
-                                                   property, isJavaV1)
-                cipher = _generate_AES_CBC_cipher(content_encryption_key,
-                                                  propertyIV)
-
-                # Decrypt the property.
-                decryptor = cipher.decryptor()
-                decrypted_data = (decryptor.update(value.value) + decryptor.finalize())
-        
-                # Unpad the data.
-                unpadder = PKCS7(128).unpadder()
-                decrypted_data = (unpadder.update(decrypted_data) + unpadder.finalize())
-
-                decrypted_data = decrypted_data.decode('utf-8')
-        
-                decrypted_entity[property] = decrypted_data
-
-        decrypted_entity.pop('_ClientEncryptionMetadata1')
-        decrypted_entity.pop('_ClientEncryptionMetadata2')
-        return decrypted_entity
-    except:
-        raise AzureException(_ERROR_DECRYPTION_FAILURE)
+    raise RuntimeError('Unsupported')
 
 def _extract_encryption_metadata(entity, require_encryption, key_encryption_key, key_resolver):
     '''
@@ -234,66 +80,4 @@ def _extract_encryption_metadata(entity, require_encryption, key_encryption_key,
         and whether the entity was encrypted using JavaV1.
     :rtype: tuple (bytes[], list, bytes[], bool)
     '''
-    _validate_not_none('entity', entity)
-    
-    try:
-        encrypted_properties_list = _decode_base64_to_bytes(entity['_ClientEncryptionMetadata2'])
-        encryption_data = entity['_ClientEncryptionMetadata1']
-        encryption_data = _dict_to_encryption_data(loads(encryption_data))
-    except Exception as e:
-        # Message did not have properly formatted encryption metadata.
-        if require_encryption:
-            raise ValueError(_ERROR_ENTITY_NOT_ENCRYPTED)
-        else:
-            return (None,None,None,None)
-
-    if not(encryption_data.encryption_agent.encryption_algorithm == _EncryptionAlgorithm.AES_CBC_256):
-        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM)
-
-    content_encryption_key = _validate_and_unwrap_cek(encryption_data, key_encryption_key, key_resolver)
-
-    # Special check for compatibility with Java V1 encryption protocol.
-    isJavaV1 = (encryption_data.key_wrapping_metadata is None) or \
-        ((encryption_data.encryption_agent.protocol == _ENCRYPTION_PROTOCOL_V1) and \
-        'EncryptionLibrary' in encryption_data.key_wrapping_metadata and \
-        'Java' in encryption_data.key_wrapping_metadata['EncryptionLibrary'])
-
-    metadataIV = _generate_property_iv(encryption_data.content_encryption_IV,
-                                      entity['PartitionKey'], entity['RowKey'],
-                                      '_ClientEncryptionMetadata2', isJavaV1)
-
-    cipher = _generate_AES_CBC_cipher(content_encryption_key, metadataIV)
-
-    # Decrypt the data.
-    decryptor = cipher.decryptor()
-    encrypted_properties_list = decryptor.update(encrypted_properties_list) + decryptor.finalize()
-
-    # Unpad the data.
-    unpadder = PKCS7(128).unpadder()
-    encrypted_properties_list = unpadder.update(encrypted_properties_list) + unpadder.finalize()
-
-    encrypted_properties_list = encrypted_properties_list.decode('utf-8')
-
-    if isJavaV1:
-        # Strip the square braces from the ends and split string into list.
-        encrypted_properties_list = encrypted_properties_list[1:-1]
-        encrypted_properties_list = encrypted_properties_list.split(', ')
-    else:
-        encrypted_properties_list = loads(encrypted_properties_list)
-
-    return (encryption_data.content_encryption_IV, encrypted_properties_list, content_encryption_key, isJavaV1)
-
-def _generate_property_iv(entity_iv, pk, rk, property_name, isJavaV1):
-    '''
-    Uses the entity_iv, partition key, and row key to generate and return
-    the iv for the specified property.
-    '''
-    digest = Hash(SHA256(), default_backend())
-    if not isJavaV1:
-        digest.update(entity_iv +
-                      (rk + pk + property_name).encode('utf-8'))
-    else:
-        digest.update(entity_iv + 
-                      (pk + rk + property_name).encode('utf-8'))
-    propertyIV = digest.finalize()
-    return propertyIV[:16]
\ No newline at end of file
+    raise RuntimeError('Unsupported')
diff --git a/setup.py b/setup.py
index 705c4c0..2fa436b 100644
--- a/setup.py
+++ b/setup.py
@@ -66,7 +66,6 @@ setup(
     install_requires=[
         'azure-nspkg',
         'azure-common',
-        'cryptography',
         'python-dateutil',
         'requests',
     ] + (['futures'] if sys.version_info < (3,0) else []),
